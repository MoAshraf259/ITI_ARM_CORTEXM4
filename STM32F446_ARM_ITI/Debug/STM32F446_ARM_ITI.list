
STM32F446_ARM_ITI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000690  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000854  0800085c  0001085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000854  08000854  0001085c  2**0
                  CONTENTS
  4 .ARM          00000000  08000854  08000854  0001085c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000854  0800085c  0001085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000854  08000854  00010854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  0800085c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800085c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001085c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010f8  00000000  00000000  00010886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d8  00000000  00000000  0001197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00011f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  000120b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000058f  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002158  00000000  00000000  0001274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004d25  00000000  00000000  000148a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000195cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003f8  00000000  00000000  0001961c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800083c 	.word	0x0800083c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800083c 	.word	0x0800083c

08000204 <EXTI_Init>:
 *      Author: moham
 */
#include "stm32f446_exti.h"

void EXTI_Init(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber,uint8_t InterruptPhase)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]
	if(InterruptPhase==EXTI_MODE_IT_FE){
 8000214:	78bb      	ldrb	r3, [r7, #2]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d115      	bne.n	8000246 <EXTI_Init+0x42>
		EXTI->FTSR |= (1<<PinNumber);
 800021a:	4b51      	ldr	r3, [pc, #324]	; (8000360 <EXTI_Init+0x15c>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	78fa      	ldrb	r2, [r7, #3]
 8000220:	2101      	movs	r1, #1
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a4d      	ldr	r2, [pc, #308]	; (8000360 <EXTI_Init+0x15c>)
 800022a:	430b      	orrs	r3, r1
 800022c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1<<PinNumber);
 800022e:	4b4c      	ldr	r3, [pc, #304]	; (8000360 <EXTI_Init+0x15c>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	78fa      	ldrb	r2, [r7, #3]
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f202 	lsl.w	r2, r1, r2
 800023a:	43d2      	mvns	r2, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4a48      	ldr	r2, [pc, #288]	; (8000360 <EXTI_Init+0x15c>)
 8000240:	400b      	ands	r3, r1
 8000242:	6093      	str	r3, [r2, #8]
 8000244:	e02f      	b.n	80002a6 <EXTI_Init+0xa2>
	}
	else if(InterruptPhase==EXTI_MODE_IT_RE){
 8000246:	78bb      	ldrb	r3, [r7, #2]
 8000248:	2b02      	cmp	r3, #2
 800024a:	d115      	bne.n	8000278 <EXTI_Init+0x74>
		EXTI->FTSR &= ~(1<<PinNumber);
 800024c:	4b44      	ldr	r3, [pc, #272]	; (8000360 <EXTI_Init+0x15c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	78fa      	ldrb	r2, [r7, #3]
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	43d2      	mvns	r2, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a40      	ldr	r2, [pc, #256]	; (8000360 <EXTI_Init+0x15c>)
 800025e:	400b      	ands	r3, r1
 8000260:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<<PinNumber);
 8000262:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <EXTI_Init+0x15c>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a3b      	ldr	r2, [pc, #236]	; (8000360 <EXTI_Init+0x15c>)
 8000272:	430b      	orrs	r3, r1
 8000274:	6093      	str	r3, [r2, #8]
 8000276:	e016      	b.n	80002a6 <EXTI_Init+0xa2>
	}
	else if(InterruptPhase==EXTI_MODE_IT_FRE){
 8000278:	78bb      	ldrb	r3, [r7, #2]
 800027a:	2b03      	cmp	r3, #3
 800027c:	d113      	bne.n	80002a6 <EXTI_Init+0xa2>
		EXTI->FTSR |= (1<<PinNumber);
 800027e:	4b38      	ldr	r3, [pc, #224]	; (8000360 <EXTI_Init+0x15c>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	78fa      	ldrb	r2, [r7, #3]
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a34      	ldr	r2, [pc, #208]	; (8000360 <EXTI_Init+0x15c>)
 800028e:	430b      	orrs	r3, r1
 8000290:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<<PinNumber);
 8000292:	4b33      	ldr	r3, [pc, #204]	; (8000360 <EXTI_Init+0x15c>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	78fa      	ldrb	r2, [r7, #3]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <EXTI_Init+0x15c>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6093      	str	r3, [r2, #8]
	}

	uint8_t RegisterNumber,PinValue,PortAsNumber;

	RegisterNumber=PinNumber/4;
 80002a6:	78fb      	ldrb	r3, [r7, #3]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	73fb      	strb	r3, [r7, #15]
	PinValue=PinNumber%4;
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	f003 0303 	and.w	r3, r3, #3
 80002b2:	73bb      	strb	r3, [r7, #14]

	PortAsNumber=GPIO_PORT_TO_NUMBER(pGPIOx);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a2b      	ldr	r2, [pc, #172]	; (8000364 <EXTI_Init+0x160>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d02b      	beq.n	8000314 <EXTI_Init+0x110>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a2a      	ldr	r2, [pc, #168]	; (8000368 <EXTI_Init+0x164>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d025      	beq.n	8000310 <EXTI_Init+0x10c>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a29      	ldr	r2, [pc, #164]	; (800036c <EXTI_Init+0x168>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d01f      	beq.n	800030c <EXTI_Init+0x108>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a28      	ldr	r2, [pc, #160]	; (8000370 <EXTI_Init+0x16c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d019      	beq.n	8000308 <EXTI_Init+0x104>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a27      	ldr	r2, [pc, #156]	; (8000374 <EXTI_Init+0x170>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d013      	beq.n	8000304 <EXTI_Init+0x100>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a26      	ldr	r2, [pc, #152]	; (8000378 <EXTI_Init+0x174>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d00d      	beq.n	8000300 <EXTI_Init+0xfc>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a25      	ldr	r2, [pc, #148]	; (800037c <EXTI_Init+0x178>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d007      	beq.n	80002fc <EXTI_Init+0xf8>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a24      	ldr	r2, [pc, #144]	; (8000380 <EXTI_Init+0x17c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d101      	bne.n	80002f8 <EXTI_Init+0xf4>
 80002f4:	2307      	movs	r3, #7
 80002f6:	e00e      	b.n	8000316 <EXTI_Init+0x112>
 80002f8:	2300      	movs	r3, #0
 80002fa:	e00c      	b.n	8000316 <EXTI_Init+0x112>
 80002fc:	2306      	movs	r3, #6
 80002fe:	e00a      	b.n	8000316 <EXTI_Init+0x112>
 8000300:	2305      	movs	r3, #5
 8000302:	e008      	b.n	8000316 <EXTI_Init+0x112>
 8000304:	2304      	movs	r3, #4
 8000306:	e006      	b.n	8000316 <EXTI_Init+0x112>
 8000308:	2303      	movs	r3, #3
 800030a:	e004      	b.n	8000316 <EXTI_Init+0x112>
 800030c:	2302      	movs	r3, #2
 800030e:	e002      	b.n	8000316 <EXTI_Init+0x112>
 8000310:	2301      	movs	r3, #1
 8000312:	e000      	b.n	8000316 <EXTI_Init+0x112>
 8000314:	2300      	movs	r3, #0
 8000316:	737b      	strb	r3, [r7, #13]
	RCC_EnablePeripheral(APB2,APB2_SYSCFG);
 8000318:	210e      	movs	r1, #14
 800031a:	2004      	movs	r0, #4
 800031c:	f000 f9bc 	bl	8000698 <RCC_EnablePeripheral>
	SYSCFG->EXTICR[RegisterNumber] |= (PortAsNumber<<PinValue*4);
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <EXTI_Init+0x180>)
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	3302      	adds	r3, #2
 8000326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800032a:	7b79      	ldrb	r1, [r7, #13]
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	4618      	mov	r0, r3
 8000336:	4913      	ldr	r1, [pc, #76]	; (8000384 <EXTI_Init+0x180>)
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	4302      	orrs	r2, r0
 800033c:	3302      	adds	r3, #2
 800033e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR |= (1<<PinNumber);
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <EXTI_Init+0x15c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	78fa      	ldrb	r2, [r7, #3]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a03      	ldr	r2, [pc, #12]	; (8000360 <EXTI_Init+0x15c>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40013c00 	.word	0x40013c00
 8000364:	40020000 	.word	0x40020000
 8000368:	40020400 	.word	0x40020400
 800036c:	40020800 	.word	0x40020800
 8000370:	40020c00 	.word	0x40020c00
 8000374:	40021000 	.word	0x40021000
 8000378:	40021400 	.word	0x40021400
 800037c:	40021800 	.word	0x40021800
 8000380:	40021c00 	.word	0x40021c00
 8000384:	40013800 	.word	0x40013800

08000388 <EXTI_ClearPending>:

void EXTI_ClearPending(uint8_t PinNumber){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1<<PinNumber)){
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <EXTI_ClearPending+0x3c>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	79fa      	ldrb	r2, [r7, #7]
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	4013      	ands	r3, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d009      	beq.n	80003b8 <EXTI_ClearPending+0x30>
		EXTI->PR |= (1<<PinNumber);
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <EXTI_ClearPending+0x3c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <EXTI_ClearPending+0x3c>)
 80003b4:	430b      	orrs	r3, r1
 80003b6:	6153      	str	r3, [r2, #20]
	}
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40013c00 	.word	0x40013c00

080003c8 <GPIO_EnablePeriClock>:

#include "stm32f446_gpio.h"
static void GPIO_EnablePeriClock(GPIO_Handle_t *pGPIO_Handle);

static void GPIO_EnablePeriClock(GPIO_Handle_t *pGPIO_Handle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	if(pGPIO_Handle->pGPIOx==GPIOA)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a23      	ldr	r2, [pc, #140]	; (8000464 <GPIO_EnablePeriClock+0x9c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d104      	bne.n	80003e4 <GPIO_EnablePeriClock+0x1c>
	{
		RCC_EnablePeripheral(AHB1, AHB1_GPIOA);
 80003da:	2100      	movs	r1, #0
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 f95b 	bl	8000698 <RCC_EnablePeripheral>
	else if(pGPIO_Handle->pGPIOx==GPIOG)
	{
		RCC_EnablePeripheral(AHB1, AHB1_GPIOG);
	}

}
 80003e2:	e03a      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOB)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <GPIO_EnablePeriClock+0xa0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d104      	bne.n	80003f8 <GPIO_EnablePeriClock+0x30>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOB);
 80003ee:	2101      	movs	r1, #1
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 f951 	bl	8000698 <RCC_EnablePeripheral>
}
 80003f6:	e030      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOC)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <GPIO_EnablePeriClock+0xa4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d104      	bne.n	800040c <GPIO_EnablePeriClock+0x44>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOC);
 8000402:	2102      	movs	r1, #2
 8000404:	2001      	movs	r0, #1
 8000406:	f000 f947 	bl	8000698 <RCC_EnablePeripheral>
}
 800040a:	e026      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOD)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <GPIO_EnablePeriClock+0xa8>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d104      	bne.n	8000420 <GPIO_EnablePeriClock+0x58>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOD);
 8000416:	2103      	movs	r1, #3
 8000418:	2001      	movs	r0, #1
 800041a:	f000 f93d 	bl	8000698 <RCC_EnablePeripheral>
}
 800041e:	e01c      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOE)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <GPIO_EnablePeriClock+0xac>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d104      	bne.n	8000434 <GPIO_EnablePeriClock+0x6c>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOE);
 800042a:	2104      	movs	r1, #4
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f933 	bl	8000698 <RCC_EnablePeripheral>
}
 8000432:	e012      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOF)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <GPIO_EnablePeriClock+0xb0>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d104      	bne.n	8000448 <GPIO_EnablePeriClock+0x80>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOF);
 800043e:	2105      	movs	r1, #5
 8000440:	2001      	movs	r0, #1
 8000442:	f000 f929 	bl	8000698 <RCC_EnablePeripheral>
}
 8000446:	e008      	b.n	800045a <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOG)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <GPIO_EnablePeriClock+0xb4>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d103      	bne.n	800045a <GPIO_EnablePeriClock+0x92>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOG);
 8000452:	2106      	movs	r1, #6
 8000454:	2001      	movs	r0, #1
 8000456:	f000 f91f 	bl	8000698 <RCC_EnablePeripheral>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000
 8000468:	40020400 	.word	0x40020400
 800046c:	40020800 	.word	0x40020800
 8000470:	40020c00 	.word	0x40020c00
 8000474:	40021000 	.word	0x40021000
 8000478:	40021400 	.word	0x40021400
 800047c:	40021800 	.word	0x40021800

08000480 <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]

	/*Enable the RCC clock for the GPIO*/
	GPIO_EnablePeriClock(pGPIO_Handle);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff9b 	bl	80003c8 <GPIO_EnablePeriClock>


	/*This part is to SET the mode of the GPIO Pin*/
		temp=(pGPIO_Handle->GPIO_Config.Mode << 2*pGPIO_Handle->GPIO_Config.PinNumber);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	7a1b      	ldrb	r3, [r3, #8]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	60fb      	str	r3, [r7, #12]
		pGPIO_Handle->pGPIOx->MODER &= ~(3<<2*pGPIO_Handle->GPIO_Config.PinNumber);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7a1b      	ldrb	r3, [r3, #8]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |=temp ;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6819      	ldr	r1, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]



	/*This part for configuration of the OUTPUT pin type*/

	temp= pGPIO_Handle->GPIO_Config.OT_Type <<pGPIO_Handle->GPIO_Config.PinNumber;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7a1b      	ldrb	r3, [r3, #8]
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(1<<pGPIO_Handle->GPIO_Config.PinNumber);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7a1b      	ldrb	r3, [r3, #8]
 80004ec:	4619      	mov	r1, r3
 80004ee:	2301      	movs	r3, #1
 80004f0:	408b      	lsls	r3, r1
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	430a      	orrs	r2, r1
 800050c:	605a      	str	r2, [r3, #4]

	/*This part is to configure the speed of the pin*/
	temp= pGPIO_Handle->GPIO_Config.SPEED <<2*pGPIO_Handle->GPIO_Config.PinNumber;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	799b      	ldrb	r3, [r3, #6]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(3<<2*pGPIO_Handle->GPIO_Config.PinNumber);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	7a1b      	ldrb	r3, [r3, #8]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	2103      	movs	r1, #3
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	430a      	orrs	r2, r1
 800054c:	605a      	str	r2, [r3, #4]

	 /*This part is to Configure the pin PullUp PullDownResistor*/
	temp= pGPIO_Handle->GPIO_Config.PUPD <<pGPIO_Handle->GPIO_Config.PinNumber;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	79db      	ldrb	r3, [r3, #7]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	7a1b      	ldrb	r3, [r3, #8]
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->PUPDR &= ~(1<<pGPIO_Handle->GPIO_Config.PinNumber);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7a1b      	ldrb	r3, [r3, #8]
 8000568:	4619      	mov	r1, r3
 800056a:	2301      	movs	r3, #1
 800056c:	408b      	lsls	r3, r1
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68d9      	ldr	r1, [r3, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]


	/*Alternate MODE  */
	if(pGPIO_Handle->GPIO_Config.Mode==GPIO_MODE_ALF)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d131      	bne.n	80005f6 <GPIO_Init+0x176>
	{
		uint8_t temp1,temp2;

		/*temp1 represents the REGISTER NUMBER (High or Low)*/
		temp1=(pGPIO_Handle->GPIO_Config.PinNumber)/8;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7a1b      	ldrb	r3, [r3, #8]
 8000596:	08db      	lsrs	r3, r3, #3
 8000598:	72fb      	strb	r3, [r7, #11]
		/*temp 2 represents the Pin number */
		temp2=(pGPIO_Handle->GPIO_Config.PinNumber)%8;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7a1b      	ldrb	r3, [r3, #8]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	72bb      	strb	r3, [r7, #10]

		/*Clearing the pin BITS*/
		pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF<<temp2*4);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7afa      	ldrb	r2, [r7, #11]
 80005aa:	3208      	adds	r2, #8
 80005ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005b0:	7abb      	ldrb	r3, [r7, #10]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	220f      	movs	r2, #15
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	7afa      	ldrb	r2, [r7, #11]
 80005c4:	4001      	ands	r1, r0
 80005c6:	3208      	adds	r2, #8
 80005c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/*Setting the Alternate function number given by user*/
		pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_Config.ALF<<4*temp2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	7afa      	ldrb	r2, [r7, #11]
 80005d2:	3208      	adds	r2, #8
 80005d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	461a      	mov	r2, r3
 80005de:	7abb      	ldrb	r3, [r7, #10]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7afa      	ldrb	r2, [r7, #11]
 80005ee:	4301      	orrs	r1, r0
 80005f0:	3208      	adds	r2, #8
 80005f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	/*External Interrupt Later*/
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <GPIO_TogglePin>:

	return value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^=(1<<PinNumber);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	405a      	eors	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	615a      	str	r2, [r3, #20]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <NVIC_ControlPeripheral>:
{
	RCB_AIRCR = ((pass<<16)|(PRIGROUP[Num_Of_GroupBits]<<8));
}


void NVIC_ControlPeripheral(uint8_t IRQ,uint8_t EnOrDis){
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	uint8_t temp1,temp2;

	temp1=IRQ/32;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	73fb      	strb	r3, [r7, #15]
	temp2=IRQ%32;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 031f 	and.w	r3, r3, #31
 8000644:	73bb      	strb	r3, [r7, #14]

	if(EnOrDis==ENABLE){
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d10e      	bne.n	800066a <NVIC_ControlPeripheral+0x42>
		NVIC->ISER[temp1] |= (1<<temp2);
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <NVIC_ControlPeripheral+0x6c>)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	2101      	movs	r1, #1
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	4618      	mov	r0, r3
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <NVIC_ControlPeripheral+0x6c>)
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4302      	orrs	r2, r0
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else{
		NVIC->ICER[temp1] |= (1<<temp2);
	}
}
 8000668:	e00f      	b.n	800068a <NVIC_ControlPeripheral+0x62>
		NVIC->ICER[temp1] |= (1<<temp2);
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <NVIC_ControlPeripheral+0x6c>)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3320      	adds	r3, #32
 8000670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	4618      	mov	r0, r3
 800067e:	4905      	ldr	r1, [pc, #20]	; (8000694 <NVIC_ControlPeripheral+0x6c>)
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	4302      	orrs	r2, r0
 8000684:	3320      	adds	r3, #32
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <RCC_EnablePeripheral>:

#endif
}

void RCC_EnablePeripheral(uint8_t BUS_ID,uint8_t PeripheralID)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	switch (BUS_ID){
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d837      	bhi.n	8000720 <RCC_EnablePeripheral+0x88>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <RCC_EnablePeripheral+0x20>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006c9 	.word	0x080006c9
 80006bc:	080006df 	.word	0x080006df
 80006c0:	080006f5 	.word	0x080006f5
 80006c4:	0800070b 	.word	0x0800070b
		case AHB1:
			RCC->AHB1ENR |=(1<<PeripheralID);
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <RCC_EnablePeripheral+0x94>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <RCC_EnablePeripheral+0x94>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 80006dc:	e021      	b.n	8000722 <RCC_EnablePeripheral+0x8a>

		case AHB2:
			RCC->AHB2ENR |=(1<<PeripheralID);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <RCC_EnablePeripheral+0x94>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	79ba      	ldrb	r2, [r7, #6]
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <RCC_EnablePeripheral+0x94>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80006f2:	e016      	b.n	8000722 <RCC_EnablePeripheral+0x8a>

		case APB1:
			RCC->APB1ENR |=(1<<PeripheralID);
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <RCC_EnablePeripheral+0x94>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <RCC_EnablePeripheral+0x94>)
 8000704:	430b      	orrs	r3, r1
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000708:	e00b      	b.n	8000722 <RCC_EnablePeripheral+0x8a>

		case APB2:
			RCC->APB2ENR |=(1<<PeripheralID);
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <RCC_EnablePeripheral+0x94>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <RCC_EnablePeripheral+0x94>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
				break;
 800071e:	e000      	b.n	8000722 <RCC_EnablePeripheral+0x8a>

		default :
			break;
 8000720:	bf00      	nop
	}



}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <GPIO_MainInit>:
#include "stm32f446.h"

GPIO_Handle_t GPIO_MainHandle;

void GPIO_MainInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	GPIO_MainHandle.pGPIOx=GPIOA;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <GPIO_MainInit+0x2c>)
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <GPIO_MainInit+0x30>)
 8000738:	601a      	str	r2, [r3, #0]
	GPIO_MainHandle.GPIO_Config.Mode=GPIO_MODE_OUTPUT;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <GPIO_MainInit+0x2c>)
 800073c:	2201      	movs	r2, #1
 800073e:	711a      	strb	r2, [r3, #4]
	GPIO_MainHandle.GPIO_Config.OT_Type=GPIO_OTYPE_PUSHPULL;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <GPIO_MainInit+0x2c>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
	GPIO_MainHandle.GPIO_Config.SPEED=GPIO_SPEED_HIGH;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <GPIO_MainInit+0x2c>)
 8000748:	2203      	movs	r2, #3
 800074a:	719a      	strb	r2, [r3, #6]
	GPIO_MainHandle.GPIO_Config.PinNumber=5;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <GPIO_MainInit+0x2c>)
 800074e:	2205      	movs	r2, #5
 8000750:	721a      	strb	r2, [r3, #8]

	GPIO_Init(&GPIO_MainHandle);
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <GPIO_MainInit+0x2c>)
 8000754:	f7ff fe94 	bl	8000480 <GPIO_Init>


}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000001c 	.word	0x2000001c
 8000760:	40020000 	.word	0x40020000

08000764 <main>:

int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

	GPIO_MainInit();
 8000768:	f7ff ffe2 	bl	8000730 <GPIO_MainInit>
	NVIC_ControlPeripheral(40, ENABLE);
 800076c:	2101      	movs	r1, #1
 800076e:	2028      	movs	r0, #40	; 0x28
 8000770:	f7ff ff5a 	bl	8000628 <NVIC_ControlPeripheral>
	EXTI_Init(GPIOC, 13, EXTI_MODE_IT_RE);
 8000774:	2202      	movs	r2, #2
 8000776:	210d      	movs	r1, #13
 8000778:	4801      	ldr	r0, [pc, #4]	; (8000780 <main+0x1c>)
 800077a:	f7ff fd43 	bl	8000204 <EXTI_Init>


    /* Loop forever */
	while(1){
 800077e:	e7fe      	b.n	800077e <main+0x1a>
 8000780:	40020800 	.word	0x40020800

08000784 <EXTI15_10_IRQHandler>:

	}
}
void EXTI15_10_IRQHandler(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	EXTI_ClearPending(13);
 8000788:	200d      	movs	r0, #13
 800078a:	f7ff fdfd 	bl	8000388 <EXTI_ClearPending>
	GPIO_TogglePin(GPIOA, 5);
 800078e:	2105      	movs	r1, #5
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <EXTI15_10_IRQHandler+0x18>)
 8000792:	f7ff ff34 	bl	80005fe <GPIO_TogglePin>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f000 f811 	bl	80007f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff ffc7 	bl	8000764 <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007e4:	0800085c 	.word	0x0800085c
  ldr r2, =_sbss
 80007e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007ec:	20000028 	.word	0x20000028

080007f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <__libc_init_array>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	4d0d      	ldr	r5, [pc, #52]	; (800082c <__libc_init_array+0x38>)
 80007f8:	4c0d      	ldr	r4, [pc, #52]	; (8000830 <__libc_init_array+0x3c>)
 80007fa:	1b64      	subs	r4, r4, r5
 80007fc:	10a4      	asrs	r4, r4, #2
 80007fe:	2600      	movs	r6, #0
 8000800:	42a6      	cmp	r6, r4
 8000802:	d109      	bne.n	8000818 <__libc_init_array+0x24>
 8000804:	4d0b      	ldr	r5, [pc, #44]	; (8000834 <__libc_init_array+0x40>)
 8000806:	4c0c      	ldr	r4, [pc, #48]	; (8000838 <__libc_init_array+0x44>)
 8000808:	f000 f818 	bl	800083c <_init>
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	2600      	movs	r6, #0
 8000812:	42a6      	cmp	r6, r4
 8000814:	d105      	bne.n	8000822 <__libc_init_array+0x2e>
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f855 3b04 	ldr.w	r3, [r5], #4
 800081c:	4798      	blx	r3
 800081e:	3601      	adds	r6, #1
 8000820:	e7ee      	b.n	8000800 <__libc_init_array+0xc>
 8000822:	f855 3b04 	ldr.w	r3, [r5], #4
 8000826:	4798      	blx	r3
 8000828:	3601      	adds	r6, #1
 800082a:	e7f2      	b.n	8000812 <__libc_init_array+0x1e>
 800082c:	08000854 	.word	0x08000854
 8000830:	08000854 	.word	0x08000854
 8000834:	08000854 	.word	0x08000854
 8000838:	08000858 	.word	0x08000858

0800083c <_init>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr

08000848 <_fini>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr
