
STM32F446_ARM_ITI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800056c  08000574  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  08000574  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000574  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000574  00020028  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000098c  00000000  00000000  0001059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000038a  00000000  00000000  00010f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000112b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001439  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000112b  00000000  00000000  00012859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004731  00000000  00000000  00013984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000180b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000208  00000000  00000000  00018108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000554 	.word	0x08000554

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000554 	.word	0x08000554

08000204 <GPIO_EnablePeriClock>:

#include "stm32f446_gpio.h"
static void GPIO_EnablePeriClock(GPIO_Handle_t *pGPIO_Handle);

static void GPIO_EnablePeriClock(GPIO_Handle_t *pGPIO_Handle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	if(pGPIO_Handle->pGPIOx==GPIOA)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a23      	ldr	r2, [pc, #140]	; (80002a0 <GPIO_EnablePeriClock+0x9c>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d104      	bne.n	8000220 <GPIO_EnablePeriClock+0x1c>
	{
		RCC_EnablePeripheral(AHB1, AHB1_GPIOA);
 8000216:	2100      	movs	r1, #0
 8000218:	2001      	movs	r0, #1
 800021a:	f000 f8db 	bl	80003d4 <RCC_EnablePeripheral>
	else if(pGPIO_Handle->pGPIOx==GPIOG)
	{
		RCC_EnablePeripheral(AHB1, AHB1_GPIOG);
	}

}
 800021e:	e03a      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <GPIO_EnablePeriClock+0xa0>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d104      	bne.n	8000234 <GPIO_EnablePeriClock+0x30>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOB);
 800022a:	2101      	movs	r1, #1
 800022c:	2001      	movs	r0, #1
 800022e:	f000 f8d1 	bl	80003d4 <RCC_EnablePeripheral>
}
 8000232:	e030      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOC)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <GPIO_EnablePeriClock+0xa4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d104      	bne.n	8000248 <GPIO_EnablePeriClock+0x44>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOC);
 800023e:	2102      	movs	r1, #2
 8000240:	2001      	movs	r0, #1
 8000242:	f000 f8c7 	bl	80003d4 <RCC_EnablePeripheral>
}
 8000246:	e026      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOD)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <GPIO_EnablePeriClock+0xa8>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d104      	bne.n	800025c <GPIO_EnablePeriClock+0x58>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOD);
 8000252:	2103      	movs	r1, #3
 8000254:	2001      	movs	r0, #1
 8000256:	f000 f8bd 	bl	80003d4 <RCC_EnablePeripheral>
}
 800025a:	e01c      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOE)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <GPIO_EnablePeriClock+0xac>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d104      	bne.n	8000270 <GPIO_EnablePeriClock+0x6c>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOE);
 8000266:	2104      	movs	r1, #4
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f8b3 	bl	80003d4 <RCC_EnablePeripheral>
}
 800026e:	e012      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOF)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <GPIO_EnablePeriClock+0xb0>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d104      	bne.n	8000284 <GPIO_EnablePeriClock+0x80>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOF);
 800027a:	2105      	movs	r1, #5
 800027c:	2001      	movs	r0, #1
 800027e:	f000 f8a9 	bl	80003d4 <RCC_EnablePeripheral>
}
 8000282:	e008      	b.n	8000296 <GPIO_EnablePeriClock+0x92>
	else if(pGPIO_Handle->pGPIOx==GPIOG)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <GPIO_EnablePeriClock+0xb4>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d103      	bne.n	8000296 <GPIO_EnablePeriClock+0x92>
		RCC_EnablePeripheral(AHB1, AHB1_GPIOG);
 800028e:	2106      	movs	r1, #6
 8000290:	2001      	movs	r0, #1
 8000292:	f000 f89f 	bl	80003d4 <RCC_EnablePeripheral>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020400 	.word	0x40020400
 80002a8:	40020800 	.word	0x40020800
 80002ac:	40020c00 	.word	0x40020c00
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40021400 	.word	0x40021400
 80002b8:	40021800 	.word	0x40021800

080002bc <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

		GPIO_EnablePeriClock(pGPIO_Handle);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff9d 	bl	8000204 <GPIO_EnablePeriClock>

		//Clear the 2 bits of the bit number mode
		pGPIO_Handle->pGPIOx->MODER &=~( 3 << 2*pGPIO_Handle->GPIO_Config.PinNumber);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	7a1b      	ldrb	r3, [r3, #8]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	43db      	mvns	r3, r3
 80002de:	4619      	mov	r1, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	400a      	ands	r2, r1
 80002e6:	601a      	str	r2, [r3, #0]
		// set the value of the mode entered by user
		pGPIO_Handle->pGPIOx->MODER |= (pGPIO_Handle->GPIO_Config.Mode<<2*pGPIO_Handle->GPIO_Config.PinNumber);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	791b      	ldrb	r3, [r3, #4]
 80002f2:	4619      	mov	r1, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7a1b      	ldrb	r3, [r3, #8]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	430a      	orrs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]

		//Choose the PullUpPullDown Register
		pGPIO_Handle->pGPIOx->PUPDR |= (pGPIO_Handle->GPIO_Config.PUPD<<pGPIO_Handle->GPIO_Config.PinNumber);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	79db      	ldrb	r3, [r3, #7]
 8000312:	4619      	mov	r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	4619      	mov	r1, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	430a      	orrs	r2, r1
 8000324:	60da      	str	r2, [r3, #12]

		//Choose the pin type whether it`s open drain or PushPull
		pGPIO_Handle->pGPIOx->OTYPER |= (pGPIO_Handle->GPIO_Config.OT_Type<<pGPIO_Handle->GPIO_Config.PinNumber);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	685a      	ldr	r2, [r3, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	4619      	mov	r1, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	7a1b      	ldrb	r3, [r3, #8]
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	4619      	mov	r1, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	430a      	orrs	r2, r1
 8000342:	605a      	str	r2, [r3, #4]

		//Set the speed of the pin
		pGPIO_Handle->pGPIOx->OSPEEDR &=~ (3<<2*pGPIO_Handle->GPIO_Config.PinNumber);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	689a      	ldr	r2, [r3, #8]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	7a1b      	ldrb	r3, [r3, #8]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	2103      	movs	r1, #3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4619      	mov	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	400a      	ands	r2, r1
 8000360:	609a      	str	r2, [r3, #8]
		pGPIO_Handle->pGPIOx->OSPEEDR |= (pGPIO_Handle->GPIO_Config.SPEED<<2*pGPIO_Handle->GPIO_Config.PinNumber);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	799b      	ldrb	r3, [r3, #6]
 800036c:	4619      	mov	r1, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	7a1b      	ldrb	r3, [r3, #8]
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	fa01 f303 	lsl.w	r3, r1, r3
 8000378:	4619      	mov	r1, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	430a      	orrs	r2, r1
 8000380:	609a      	str	r2, [r3, #8]

}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <GPIO_WriteToPin>:
void GPIO_WriteToPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber,uint8_t value)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	70fb      	strb	r3, [r7, #3]
 8000396:	4613      	mov	r3, r2
 8000398:	70bb      	strb	r3, [r7, #2]
	if(value==DISABLE){
 800039a:	78bb      	ldrb	r3, [r7, #2]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10a      	bne.n	80003b6 <GPIO_WriteToPin+0x2c>
	pGPIOx->ODR &=~(1<<PinNumber);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	78fa      	ldrb	r2, [r7, #3]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	401a      	ands	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR |=(1<<PinNumber);
	}
}
 80003b4:	e008      	b.n	80003c8 <GPIO_WriteToPin+0x3e>
		pGPIOx->ODR |=(1<<PinNumber);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	78fa      	ldrb	r2, [r7, #3]
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	615a      	str	r2, [r3, #20]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003d4 <RCC_EnablePeripheral>:

#endif
}

void RCC_EnablePeripheral(uint8_t BUS_ID,uint8_t PeripheralID)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
	switch (BUS_ID){
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d837      	bhi.n	800045c <RCC_EnablePeripheral+0x88>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <RCC_EnablePeripheral+0x20>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000405 	.word	0x08000405
 80003f8:	0800041b 	.word	0x0800041b
 80003fc:	08000431 	.word	0x08000431
 8000400:	08000447 	.word	0x08000447
		case AHB1:
			RCC->AHB1ENR |=(1<<PeripheralID);
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 8000418:	e021      	b.n	800045e <RCC_EnablePeripheral+0x8a>

		case AHB2:
			RCC->AHB2ENR |=(1<<PeripheralID);
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <RCC_EnablePeripheral+0x94>)
 800041c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041e:	79ba      	ldrb	r2, [r7, #6]
 8000420:	2101      	movs	r1, #1
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <RCC_EnablePeripheral+0x94>)
 800042a:	430b      	orrs	r3, r1
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800042e:	e016      	b.n	800045e <RCC_EnablePeripheral+0x8a>

		case APB1:
			RCC->APB1ENR |=(1<<PeripheralID);
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000434:	79ba      	ldrb	r2, [r7, #6]
 8000436:	2101      	movs	r1, #1
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	4611      	mov	r1, r2
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000444:	e00b      	b.n	800045e <RCC_EnablePeripheral+0x8a>

		case APB2:
			RCC->APB2ENR |=(1<<PeripheralID);
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <RCC_EnablePeripheral+0x94>)
 8000456:	430b      	orrs	r3, r1
 8000458:	6453      	str	r3, [r2, #68]	; 0x44
				break;
 800045a:	e000      	b.n	800045e <RCC_EnablePeripheral+0x8a>

		default :
			break;
 800045c:	bf00      	nop
	}



}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40023800 	.word	0x40023800

0800046c <GPIO_MainInit>:
#include "stm32f446.h"

GPIO_Handle_t GPIO_MainHandle;

void GPIO_MainInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	GPIO_MainHandle.pGPIOx=GPIOA;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <GPIO_MainInit+0x2c>)
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <GPIO_MainInit+0x30>)
 8000474:	601a      	str	r2, [r3, #0]
	GPIO_MainHandle.GPIO_Config.Mode=GPIO_MODE_OUTPUT;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <GPIO_MainInit+0x2c>)
 8000478:	2201      	movs	r2, #1
 800047a:	711a      	strb	r2, [r3, #4]
	GPIO_MainHandle.GPIO_Config.OT_Type=GPIO_OTYPE_PUSHPULL;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <GPIO_MainInit+0x2c>)
 800047e:	2200      	movs	r2, #0
 8000480:	715a      	strb	r2, [r3, #5]
	GPIO_MainHandle.GPIO_Config.SPEED=GPIO_SPEED_HIGH;
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <GPIO_MainInit+0x2c>)
 8000484:	2203      	movs	r2, #3
 8000486:	719a      	strb	r2, [r3, #6]
	GPIO_MainHandle.GPIO_Config.PinNumber=5;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <GPIO_MainInit+0x2c>)
 800048a:	2205      	movs	r2, #5
 800048c:	721a      	strb	r2, [r3, #8]

	GPIO_Init(&GPIO_MainHandle);
 800048e:	4802      	ldr	r0, [pc, #8]	; (8000498 <GPIO_MainInit+0x2c>)
 8000490:	f7ff ff14 	bl	80002bc <GPIO_Init>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000001c 	.word	0x2000001c
 800049c:	40020000 	.word	0x40020000

080004a0 <main>:

int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0

	GPIO_MainInit();
 80004a4:	f7ff ffe2 	bl	800046c <GPIO_MainInit>

	GPIO_WriteToPin(GPIOA, 5, SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2105      	movs	r1, #5
 80004ac:	4801      	ldr	r0, [pc, #4]	; (80004b4 <main+0x14>)
 80004ae:	f7ff ff6c 	bl	800038a <GPIO_WriteToPin>
    /* Loop forever */
	for(;;);
 80004b2:	e7fe      	b.n	80004b2 <main+0x12>
 80004b4:	40020000 	.word	0x40020000

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	; (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	; (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff ffd9 	bl	80004a0 <main>

080004ee <LoopForever>:

LoopForever:
  b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004fc:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 8000500:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000504:	20000028 	.word	0x20000028

08000508 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	; (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	; (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	; (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	; (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800056c 	.word	0x0800056c
 8000548:	0800056c 	.word	0x0800056c
 800054c:	0800056c 	.word	0x0800056c
 8000550:	08000570 	.word	0x08000570

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
